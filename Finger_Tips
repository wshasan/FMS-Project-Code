let circles = [];
const CX = 320, CY = 360;

function setup() {
  createCanvas(640, 640);
  if (typeof touchAction === "function") touchAction('none');
  circles = [
    new DraggableCircle(80, 400, 40),
    new DraggableCircle(150, 160, 40),
    new DraggableCircle(300, 103, 40),
    new DraggableCircle(450, 144, 40),
    new DraggableCircle(550, 276, 40)
  ];
  for (let c of circles) c.initialDist = dist(c.x, c.y, CX, CY);
}

function draw() {
  background(255);
  strokeWeight(2);
  for (let c of circles) {
    const d = dist(c.x, c.y, CX, CY);
    stroke(d > c.initialDist ? 'red' : 'green');
    line(c.x, c.y, CX, CY);
  }
  for (let c of circles) {
    c.update();
    c.show();
  }
  releaseFinishedTouches();
}

function mousePressed() {
  for (let i = circles.length - 1; i >= 0; i--) {
    if (circles[i].tryGrabAt(mouseX, mouseY, "mouse")) break;
  }
}
function mouseReleased() {
  for (let c of circles) c.releaseIf("mouse");
}

function touchStarted() {
  for (let t of touches) {
    for (let i = circles.length - 1; i >= 0; i--) {
      if (!circles[i].dragging && circles[i].tryGrabAt(t.x, t.y, t.id)) break;
    }
  }
  return false;
}
function touchMoved() { return false; }
function touchEnded() { releaseFinishedTouches(); return false; }

function getTouchById(id) {
  for (let t of touches) if (t.id === id) return t;
  return null;
}
function releaseFinishedTouches() {
  for (let c of circles) {
    if (c.touchId !== null && c.touchId !== "mouse") {
      const stillActive = getTouchById(c.touchId);
      if (!stillActive) c.release();
    }
  }
}
